--- contrib/cpu.lisp	2011-03-14 21:21:37.804000019 +0100
+++ contrib/cpu.lisp	2011-03-14 21:23:58.742000108 +0100
@@ -36,20 +36,9 @@
 
 (in-package :stumpwm)
 
-(export '(*acpi-thermal-zone*))
 
 ;; Install formatters.
-(dolist (a '((#\c fmt-cpu-usage)
-             (#\C fmt-cpu-usage-bar)
-             (#\f fmt-cpu-freq)
-             (#\t fmt-cpu-temp)))
-  (pushnew a *screen-mode-line-formatters* :test 'equal))
-
-;; Defaults arguments for fmt-cpu-usage-bar
-(defvar *cpu-usage-bar-width* 10)
-(defvar *cpu-usage-bar-full* #\#)
-(defvar *cpu-usage-bar-empty* #\:)
-
+(pushnew '(#\c fmt-cpu-usage) *screen-mode-line-formatters* :test 'equal)
 
 (defvar *prev-user-cpu* 0)
 (defvar *prev-sys-cpu* 0)
@@ -98,15 +87,7 @@
   "Returns a string representing current the percent of average CPU
   utilization."
   (declare (ignore ml))
-  (let ((cpu (truncate (* 100 (current-cpu-usage)))))
-    (format nil "CPU: ^[~A~3D%^] " (bar-zone-color cpu) cpu)))
-
-(defun fmt-cpu-usage-bar (ml &optional (width *cpu-usage-bar-width*) (full *cpu-usage-bar-full*) (empty *cpu-usage-bar-empty*))
-  "Returns a coloured bar-graph representing the current percent of average CPU
-utilization."
-  (declare (ignore ml))
-  (let ((cpu (truncate (* 100 (current-cpu-usage)))))
-    (bar cpu width full empty)))
+  (format nil "~A%" (truncate (* 100 (current-cpu-usage)))))
 
 (defun get-proc-file-field (fname field)
   (with-open-file (s fname :if-does-not-exist nil) ;
@@ -116,42 +97,3 @@
           (let ((split (cl-ppcre:split "\\s*:\\s*" line)))
             (when (string= (car split) field) (return (cadr split)))))
         "")))
-
-(defun fmt-cpu-freq (ml)
-  "Returns a string representing the current CPU frequency (especially useful for laptop users.)"
-  (declare (ignore ml))
-  (let ((mhz (parse-integer (get-proc-file-field "/proc/cpuinfo" "cpu MHz")
-                            :junk-allowed t)))
-    (if (>= mhz 1000)
-	(format nil "~,2FGHz" (/ mhz 1000))
-	(format nil "~DMHz" mhz))))
-
-(defvar *acpi-thermal-zone*
-  (let ((proc-dir (list-directory #P"/proc/acpi/thermal_zone/"))
-        (sys-dir (sort
-                  (remove-if-not
-                   (lambda (x)
-                     (when (cl-ppcre:scan "^.*/thermal_zone\\d+/" (namestring x))
-                       x))
-                   (list-directory #P"/sys/class/thermal/"))
-                  #'string< :key #'namestring)))
-    (cond
-      (proc-dir
-       (cons :procfs
-             (make-pathname :directory (pathname-directory (first proc-dir))
-                            :name "temperature")))
-      (sys-dir
-       (cons :sysfs
-             (make-pathname :directory (pathname-directory (first sys-dir))
-                            :name "temp"))))))
-
-(defun fmt-cpu-temp (ml)
-  "Returns a string representing the current CPU temperature."
-  (declare (ignore ml))
-  (format nil "~aÂ°C"
-          (case (car *acpi-thermal-zone*)
-            (:procfs (parse-integer
-                      (get-proc-file-field (cdr *acpi-thermal-zone*) "temperature")
-                      :junk-allowed t))
-            (:sysfs   (with-open-file (f (cdr *acpi-thermal-zone*))
-                        (/ (read f) 1000))))))
